{"cells":[{"cell_type":"markdown","source":["#1. What is the difference between interpreted and compiled language?\n","   - Compiled Languages\n","    The entire source code is translated into machine code by a compiler before execution.\n","    The compiler generates an executable file that runs independently of the source code.\n","    Faster execution since the machine code is pre-generated.\n","    Examples: C, C++, Java (compiled to bytecode), Rust, Go"],"metadata":{"id":"kllWUP4ulV9O"}},{"cell_type":"markdown","source":["#2.What is exception handling in Python ?\n","  - Exception handling in Python is a way to handle runtime errors gracefully, preventing the program from crashing. It allows    developers to catch and handle errors using try-except blocks.\n","\n"],"metadata":{"id":"4CiIvokZl75a"}},{"cell_type":"markdown","source":["#3.What is the purpose of the finally block in exception handling ?\n","   - The finally block is used in Python exception handling to execute code no matter what happens, whether an exception occurs or not. It is typically used for cleanup tasks like closing files, releasing resources, or disconnecting from a database.\n","\n"],"metadata":{"id":"puVdjvITm0VT"}},{"cell_type":"markdown","source":["#4.What is logging in Python ?\n"," - Logging in Python is used to record messages about the execution of a program. It helps track events, debug issues, and analyze program flow, making it useful for debugging, monitoring, and auditing.\n","\n"],"metadata":{"id":"itmXrJulm_Pr"}},{"cell_type":"markdown","source":["#5.What is the significance of the __del__ method in Python ?\n"," - The __del__ method is a destructor in Python, called automatically when an object is about to be destroyed (i.e., when there are no more references to it). It allows cleanup operations before the object is removed from memory.\n","\n"],"metadata":{"id":"KeNFczx1nPiu"}},{"cell_type":"markdown","source":["#6.What is the difference between import and from ... import in Python ?\n"," - 1. import module_name\n","✔ Imports the entire module.\n","✔ Requires using the module name to access functions or variables.\n","\n","import math  # Importing the entire module\n","\n","print(math.sqrt(16))  # Accessing sqrt() using module name\n","✅ Output: 4.0\n","\n","#Pros:\n","Avoids name conflicts (since functions are accessed via module_name.function()).\n","Makes it clear where each function comes from.\n","#Cons:\n","Can be verbose when calling functions (math.sqrt() instead of just sqrt()).\n"," from module_name import specific_function\n","✔ Imports only the specified function(s) from a module.\n","✔ No need to use the module name when calling the function.\n","\n","\n","from math import sqrt  # Importing only sqrt()\n","\n","print(sqrt(16))  # No need to use math.sqrt()\n","✅ Output: 4.0\n","\n","#Pros:\n","Less typing (no need to use module_name.function()).\n","Improves readability for frequently used functions.\n","#Cons:\n","Risk of name conflicts if multiple modules have functions with the same name.\n","Harder to know where functions come from in large codebases.\n","\n","- from module_name import * (Not Recommended)\n","✔ Imports everything from the module.\n","✔ No need to prefix function names with the module name."],"metadata":{"id":"oU85X8DJnbKw"}},{"cell_type":"markdown","source":["#7.How can you handle multiple exceptions in Python ?\n","  - you can handle multiple exceptions using different approaches. One way is by using multiple except blocks, where each block handles a specific exception separately. For example, if a program takes user input and performs division, it might encounter a ZeroDivisionError if the user enters zero or a ValueError if the input is not a number. By using multiple except blocks, you can display different error messages for each case. Another approach is to use a single except block with multiple exceptions by grouping them in a tuple. This method is useful when multiple exceptions should be handled in the same way. Additionally, Python allows catching all exceptions using a generic except Exception as e block, which captures any unexpected errors. However, using this approach should be done carefully to avoid masking important debugging information. For complex scenarios, you can use a try-except-else-finally structure, where the else block executes if no exceptions occur, and the finally block executes regardless of whether an exception was raised, making it ideal for resource cleanup like closing files or database connections."],"metadata":{"id":"EGLnBWcOn-pc"}},{"cell_type":"markdown","source":["#8.What is the purpose of the with statement when handling files in Python ?\n","  - The with statement in Python is used for handling files efficiently by ensuring proper resource management. Its main purpose is to automatically handle file closing, preventing potential issues like memory leaks or data corruption. When opening a file using with open(filename, mode) as file, Python ensures that the file is closed as soon as the block inside with is exited, even if an exception occurs. This eliminates the need to explicitly call file.close(), making the code cleaner and less error-prone."],"metadata":{"id":"UPTg8RWgoV0w"}},{"cell_type":"markdown","source":["#9.What is the difference between multithreading and multiprocessing ?\n","  - Execution: Multithreading runs multiple threads within a single process, sharing the same memory space, whereas multiprocessing runs multiple processes, each with its own memory, making them independent of each other.\n","\n","- Best Use Case: Multithreading is ideal for I/O-bound tasks such as file reading/writing, web scraping, and database queries, while multiprocessing is best for CPU-bound tasks like large-scale computations, AI/ML processing, and data analysis.\n","\n"," - Parallelism: Multithreading does not achieve true parallel execution due to Python’s Global Interpreter Lock (GIL), which allows only one thread to execute at a time, whereas multiprocessing allows true parallel execution by running processes on multiple CPU cores.\n","\n","- Memory Usage: In multithreading, all threads share the same memory space, which reduces memory consumption and overhead. In contrast, multiprocessing creates separate memory spaces for each process, increasing resource usage but preventing data conflicts.-\n","\n","- Overhead: Multithreading has lower overhead since threads are lightweight and communicate easily through shared memory. On the other hand, multiprocessing has higher overhead because processes require more memory and communication mechanisms like pipes or queues.\n","\n","- Performance: For tasks that involve waiting, such as downloading files or handling network requests, multithreading is more efficient. However, for computation-heavy tasks that require high CPU power, multiprocessing performs better by utilizing multiple cores."],"metadata":{"id":"lAh4fuvnsA7Z"}},{"cell_type":"markdown","source":["#10.What are the advantages of using logging in a program ?\n","  - Debugging and Troubleshooting: Logging helps track errors, warnings, and important events, making it easier to debug and troubleshoot issues without modifying the code significantly.\n","\n","- Better Monitoring and Maintenance: Logs provide insights into program execution, helping developers and system administrators monitor the application's behavior over time.\n","\n","- Error Tracking Without Stopping Execution: Unlike print statements, logs allow capturing errors and warnings without interrupting the program flow, ensuring smooth execution even if issues occur.\n","\n","- Customizable Log Levels: Logging provides different levels like DEBUG, INFO, WARNING, ERROR, and CRITICAL, allowing developers to control the level of detail they want in the logs.\n","\n","- Persistent Record Keeping: Logs can be saved to files or external systems, providing historical records of program execution, which helps analyze past issues or audit activities.\n","\n","- Performance Optimization: By analyzing logs, developers can identify slow or inefficient parts of the program, optimizing performance based on real execution data.\n","\n","- Easier Collaboration: In team projects, logs help multiple developers understand issues and program flow without needing direct explanations, improving team efficiency.\n","\n","- Security and Compliance: Logs can track authentication attempts, data access, and system changes, ensuring security compliance and detecting unauthorized activities.\n","\n","- Remote Monitoring and Alerts: Advanced logging systems integrate with monitoring tools to send alerts or notifications when critical issues occur, allowing proactive problem resolution.\n","\n","- Less Invasive Than Print Statements: Unlike print(), logging can be easily configured, formatted, filtered, and redirected to files or monitoring tools without modifying the code structure significantly."],"metadata":{"id":"bAtnK8oSsfbb"}},{"cell_type":"markdown","source":["#11.What is memory management in Python ?\n","  - Memory management in Python is an automatic process that handles the allocation and deallocation of memory to ensure efficient program execution. It relies on several key mechanisms such as reference counting, garbage collection, and dynamic memory allocation."],"metadata":{"id":"NvUczv4TvNJ7"}},{"cell_type":"markdown","source":["#12.What are the basic steps involved in exception handling in Python ?\n","  - Try Block\n","  - Except Block\n","  - Multiple Exceptions Handling:\n","  - Else Block\n","  - Finally Block  "],"metadata":{"id":"HaSv35Q6vaG0"}},{"cell_type":"markdown","source":["#13.Why is memory management important in Python ?\n","  - Memory management in Python is important because it ensures efficient resource utilization, prevents memory leaks, and optimizes performance. Python uses automatic memory management with reference counting and garbage collection to free unused memory. Proper memory management is crucial for handling large datasets, avoiding fragmentation, and ensuring smooth execution of applications. It also helps in multi-threading and scalability, making Python programs run efficiently without excessive memory consumption."],"metadata":{"id":"pj3KibUvxVjC"}},{"cell_type":"markdown","source":["#14.What is the role of try and except in exception handling ?\n","  - The try and except blocks in Python are used for exception handling, allowing a program to catch and handle errors gracefully without crashing.\n","\n","   try block: Contains the code that might raise an exception.\n","   except block: Defines how to handle specific exceptions if they occur.\n","    This ensures smooth execution by catching errors and providing alternative solutions or meaningful error messages instead of abruptly stopping the program."],"metadata":{"id":"EKmMPNdQBSEC"}},{"cell_type":"markdown","source":["#15.How does Python's garbage collection system work ?\n","   - Python's garbage collection system automatically manages memory using reference counting and cyclic garbage collection:\n","\n","   Reference Counting: Objects are deleted when their reference count drops to zero.\n","    Cyclic Garbage Collection: Detects and removes circular references that reference counting alone can't handle.\n","   Automatic & Manual GC: Runs periodically or can be triggered manually using gc.collect().\n","    This system prevents memory leaks, optimizes performance, and ensures efficient memory use. 🚀"],"metadata":{"id":"Dfm5yE_uBgDu"}},{"cell_type":"markdown","source":["#16.What is the purpose of the else block in exception handling ?\n","   - The else block in exception handling executes only if no exceptions occur in the try block. It keeps the try block focused on risky code and ensures error-free code runs separately, improving readability."],"metadata":{"id":"l2g4PvElByAN"}},{"cell_type":"markdown","source":["#17.What are the common logging levels in Python ?\n","   - DEBUG (10) – Used for detailed information, typically useful for diagnosing problems.\n","      INFO (20) – Used to confirm that things are working as expected.\n","    WARNING (30) – Indicates a potential problem or something unexpected but the program continues running.\n","   ERROR (40) – Indicates a more serious issue that has caused a failure in some part of the program.\n","    CRITICAL (50) – Indicates a very severe error that may cause the program to stop running"],"metadata":{"id":"Le6UzS48CHsN"}},{"cell_type":"markdown","source":["#18.What is the difference between os.fork() and multiprocessing in Python ?\n"," - Use os.fork() when you need low-level process control (Unix/Linux only).\n","   Use multiprocessing for high-level parallelism and cross-platform compatibility."],"metadata":{"id":"6CsFSWZNHW6O"}},{"cell_type":"markdown","source":["#19.What is the importance of closing a file in Python ?\n","   - Frees up system resources – Prevents memory leaks and file descriptor exhaustion.\n","Ensures data is written – Flushes buffers to prevent data loss in write operations.\n","Prevents file corruption – Avoids partial writes or inconsistent file states.\n","Allows other programs to access the file – Some files may remain locked if not closed properly."],"metadata":{"id":"4NPr6xJxHoQp"}},{"cell_type":"markdown","source":["#20.What is the difference between file.read() and file.readline() in Python ?\n","\n","- file.read(size) → Reads the entire file (or size bytes if given) as a single string.\n","file.readline() → Reads one line at a time"],"metadata":{"id":"bIYpEhxmnNR2"}},{"cell_type":"markdown","source":["#21.What is the logging module in Python used for ?\n","  - The logging module in Python is used for:\n","\n","  ✅ Tracking Events – Helps record messages during code execution (for debugging or monitoring).\n","  ✅ Error Handling – Logs warnings, errors, and critical issues.\n","  ✅ Debugging – Provides insights into program flow and variable states.\n","  ✅ File Logging – Saves logs to files for later analysis.    "],"metadata":{"id":"iFJjJCvPIaNN"}},{"cell_type":"markdown","source":["#22.What is the os module in Python used for in file handling ?\n"," -✅ Creating & Removing Files – os.remove(\"file.txt\")\n","✅ Checking File Existence – os.path.exists(\"file.txt\")\n","✅ Renaming Files – os.rename(\"old.txt\", \"new.txt\")\n","✅ Creating & Removing Directories – os.mkdir(\"new_folder\"), os.rmdir(\"folder\")\n","✅ Getting File Info – os.path.getsize(\"file.txt\")"],"metadata":{"id":"xQo9WbyhItDa"}},{"cell_type":"markdown","source":["#23.What are the challenges associated with memory management in Python ?\n","- garbage Collection Overhead 🚮\n","\n","Python uses automatic garbage collection (gc module), which can add execution overhead.\n","Memory Leaks 🛠️\n","\n","Objects with circular references or global variables may not be freed properly.\n","High Memory Usage 📈\n","\n","Python's dynamic typing and object overhead consume more memory than lower-level languages like C.\n","Fragmentation 🧩\n","\n","Frequent memory allocation and deallocation can lead to memory fragmentation, reducing efficiency.\n","Reference Counting Issues 🔄\n","\n","Python uses reference counting, but circular references require garbage collection to free memory.\n","Global Interpreter Lock (GIL) 🔒\n","\n","Limits true parallelism in multi-threading, affecting memory management in multi-core systems."],"metadata":{"id":"QMgaF8xmJKUe"}},{"cell_type":"markdown","source":["#24.How do you raise an exception manually in Python ?\n","  - Use raise to manually trigger exceptions in Python.\n","\n"," Example:\n","raise ValueError(\"Invalid input!\")\n","✅ Helpful for error handling and input validation! 🚀"],"metadata":{"id":"9H_LMpJnJaiJ"}},{"cell_type":"markdown","source":["#25.Why is it important to use multithreading in certain applications ?\n"," - ✅ Improves Performance – Allows tasks to run concurrently, reducing execution time.\n","  ✅ Efficient Resource Utilization – Uses CPU cores effectively by running multiple threads.\n","  ✅ Better Responsiveness – Keeps applications (like GUIs) responsive while performing background tasks.\n","  ✅ Parallel I/O Operations – Speeds up file handling, network requests, and database operations.\n","  ✅ Concurrency in Web Scraping & Networking – Handles multiple requests simultaneously.\n","\n"],"metadata":{"id":"kbrCYjJdJ3-m"}},{"cell_type":"markdown","source":["#PRACTICAL QUESTIONS"],"metadata":{"id":"DZQ0Mnr2Lvlz"}},{"cell_type":"markdown","source":["#1.How can you open a file for writing in Python and write a string to it ?\n"," - You can open a file for writing in Python using the open() function w ith the \"w\" mode and write a string using write()."],"metadata":{"id":"LCCaRtBoL4Bc"}},{"cell_type":"markdown","source":["#2.Write a Python program to read the contents of a file and print each line ?\n"," -   with open(\"example.txt\", \"r\") as file:\n","    for line in file:\n","        print(line.strip())  # Strip removes extra newlines\n","✅ Uses with open() to ensure the file is closed automatically.\n","✅ Reads and prints each line efficiently. 🚀"],"metadata":{"id":"7SK3jNTiMRfu"}},{"cell_type":"markdown","source":["3.How would you handle a case where the file doesn't exist while trying to open it for reading ?\n"],"metadata":{"id":"wXK1LjnCMkhk"}},{"cell_type":"code","source":["try:\n","    with open(\"example.txt\", \"r\") as file:\n","        print(file.read())\n","except FileNotFoundError:\n","    print(\"Error: The file does not exist!\")"],"metadata":{"id":"j9KhdFuSM4UH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#4.Write a Python script that reads from one file and writes its content to another file ?"],"metadata":{"id":"QoX_kG7bM5N7"}},{"cell_type":"code","source":["def copy_file(source_file, destination_file):\n","    try:\n","        with open(source_file, 'r', encoding='utf-8') as src:\n","            content = src.read()\n","\n","        with open(destination_file, 'w', encoding='utf-8') as dest:\n","            dest.write(content)\n","\n","        print(f\"Content copied from {source_file} to {destination_file} successfully.\")\n","    except FileNotFoundError:\n","        print(\"Error: Source file not found.\")\n","    except Exception as e:\n","        print(f\"An error\n"],"metadata":{"id":"LgQMAVHnj_qc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#5.How would you catch and handle division by zero error in Python ?\n"],"metadata":{"id":"GEW4msY4kHP4"}},{"cell_type":"code","source":["def safe_divide(a, b):\n","    try:\n","        result = a / b\n","        print(f\"Result: {result}\")\n","    except ZeroDivisionError:\n","        print(\"Error: Division by zero is not allowed.\")\n","    except Exception as e:\n","        print(f\"An unexpected error occurred: {e}\")\n","\n","# Test cases\n","safe_divide(10, 2)  # Normal division\n","safe_divide(5, 0)   # Division by zero case\n"],"metadata":{"id":"Vn99U6i4kN2g"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#6. Write a Python program that logs an error message to a log file when a division by zero exception occurs ?"],"metadata":{"id":"-AAWyZdZkUjA"}},{"cell_type":"code","source":["def safe_divide(a, b):\n","    try:\n","        result = a / b\n","        print(f\"Result: {result}\")\n","    except ZeroDivisionError:\n","        print(\"Error: Division by zero is not allowed.\")\n","    except Exception as e:\n","        print(f\"An unexpected error occurred: {e}\")\n","\n","# Test cases\n","safe_divide(10, 2)  # Normal division\n","safe_divide(5, 0)   # Division by zero case\n"],"metadata":{"id":"I7kmTzczkcLC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["7.How do you log information at different levels (INFO, ERROR, WARNING) in Python using the logging module ?"],"metadata":{"id":"ExJvj8_nkm4K"}},{"cell_type":"code","source":["import logging\n","\n","# Configure logging\n","logging.basicConfig(\n","    filename='app.log',\n","    level=logging.DEBUG,\n","    format='%(asctime)s - %(levelname)s - %(message)s'\n",")\n","\n","# Logging messages at different levels\n","logging.debug(\"This is a debug message\")   # Useful for debugging\n","logging.info(\"This is an info message\")    # General information\n","logging.warning(\"This is a warning message\")  # Indicates potential problems\n","logging.error(\"This is an error message\")  # Indicates an error\n","logging.critical(\"This is a critical message\")  # Serious error\n","\n","print(\"Logs have been written to app.log\")\n"],"metadata":{"id":"sLfqMhu5kwm9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#8.Write a program to handle a file opening error using exception handling ?"],"metadata":{"id":"3e0-Cyx0lP-3"}},{"cell_type":"code","source":["import logging\n","\n","# Configure logging\n","logging.basicConfig(filename='error.log', level=logging.ERROR,\n","                    format='%(asctime)s - %(levelname)s - %(message)s')\n","\n","def open_file(filename):\n","    try:\n","        with open(filename, 'r') as file:\n","            content = file.read()\n","            print(content)\n","    except FileNotFoundError:\n","        logging.error(\"File not found error\", exc_info=True)\n","        print(\"Error: File not found.\")\n","    except PermissionError:\n","        logging.error(\"Permission denied error\", exc_info=True)\n","        print(\"Error: Permission denied.\")\n","    except IOError as e:\n","        logging.error(f\"IO error occurred: {e}\", exc_info=True)\n","        print(f\"Error: An IO error occurred - {e}\")\n","\n","# Example usage\n","open_file(\"non_existent_file.txt\")  # Handles file not found\n","open_file(\"/root/protected_file.txt\")  # Handles permission errors (if applicable)\n"],"metadata":{"id":"GqR7zg0rlTH7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#9.How can you read a file line by line and store its content in a list in Python ?"],"metadata":{"id":"He7QJPgDlq70"}},{"cell_type":"code","source":["with open(\"example.txt\", \"r\") as file:\n","    lines = file.readlines()  # Reads all lines and stores them in a list\n"],"metadata":{"id":"gKew03D2lzli"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#10.How can you append data to an existing file in Python ?"],"metadata":{"id":"-sjhjwtJmKWP"}},{"cell_type":"code","source":["def append_to_file(filename, text):\n","    try:\n","        with open(filename, 'a', encoding='utf-8') as file:\n","            file.write(text + '\\n')  # Append text with a newline\n","        print(f\"Successfully appended data to {filename}\")\n","    except Exception as e:\n","        print(f\"An error occurred: {e}\")\n","\n","# Example usage\n","append_to_file(\"example.txt\", \"This is a new line added to the file.\")\n","append_to_file(\"example.txt\", \"Appending another line!\")\n"],"metadata":{"id":"dbQjHG4pmQ79"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#11.Write a Python program that uses a try-except block to handle an error when attempting to access a dictionary key that doesn't exist ?\n"],"metadata":{"id":"I1cew6_zmXzN"}},{"cell_type":"code","source":["import logging\n","\n","# Configure logging\n","logging.basicConfig(filename='error.log', level=logging.ERROR,\n","                    format='%(asctime)s - %(levelname)s - %(message)s')\n","\n","def divide(a, b):\n","    try:\n","        result = a / b\n","        print(f\"Result: {result}\")\n","    except ZeroDivisionError as e:\n","        logging.error(\"Attempted to divide by zero\", exc_info=True)\n","        print(\"Error: Cannot divide by zero.\")\n","\n","def open_file(filename):\n","    try:\n","        with open(filename, 'r') as file:\n","            content = file.read()\n","            print(content)\n","    except FileNotFoundError as e:\n","        logging.error(\"File not found error\", exc_info=True)\n","        print(\"Error: File not found.\")\n","\n","def access_dict_key(data, key):\n","    try:\n","        value = data[key]\n","        print(f\"Value: {value}\")\n","    except KeyError as e:\n","        logging.error(\"Dictionary key not found\", exc_info=True)\n","        print(\"Error: Key not found in dictionary.\")\n","\n","# Example usage\n","divide(10, 2)  # Normal division\n","divide(5, 0)   # This will cause an error and log it\n","open_file(\"non_existent_file.txt\")  # This will cause a file error and log it\n","access_dict_key({\"name\": \"Alice\", \"age\": 25}, \"address\")  # This will cause a dictionary key error and log it"],"metadata":{"id":"4BL3NxphmvPy"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#12.Write a program that demonstrates using multiple except blocks to handle different types of exceptions ?"],"metadata":{"id":"AZg_OAulmwUC"}},{"cell_type":"code","source":["import logging\n","\n","# Configure logging\n","logging.basicConfig(filename='error.log', level=logging.ERROR,\n","                    format='%(asctime)s - %(levelname)s - %(message)s')\n","\n","def divide(a, b):\n","    try:\n","        result = a / b\n","        print(f\"Result: {result}\")\n","    except ZeroDivisionError as e:\n","        logging.error(\"Attempted to divide by zero\", exc_info=True)\n","        print(\"Error: Cannot divide by zero.\")\n","\n","def open_file(filename):\n","    try:\n","        with open(filename, 'r') as file:\n","            content = file.read()\n","            print(content)\n","    except FileNotFoundError as e:\n","        logging.error(\"File not found error\", exc_info=True)\n","        print(\"Error: File not found.\")\n","\n","def access_dict_key(data, key):\n","    try:\n","        value = data[key]\n","        print(f\"Value: {value}\")\n","    except KeyError as e:\n","        logging.error(\"Dictionary key not found\", exc_info=True)\n","        print(\"Error: Key not found in dictionary.\")\n","\n","# Example usage\n","divide(10, 2)  # Normal division\n","divide(5, 0)   # This will cause an error and log it\n","open_file(\"non_existent_file.txt\")  # This will cause a file error and log it\n","access_dict_key({\"name\": \"Alice\", \"age\": 25}, \"address\")  # This will cause a dictionary key error and log it\n"],"metadata":{"id":"ES_E5TzMm3cc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#13.How would you check if a file exists before attempting to read it in Python"],"metadata":{"id":"MRky5Ys8nHsi"}},{"cell_type":"code","source":["import os\n","\n","filename = \"example.txt\"\n","\n","if os.path.exists(filename):\n","    with open(filename, 'r') as file:\n","        content = file.read()\n","        print(content)\n","else:\n","    print(\"Error: File does not exist.\")\n"],"metadata":{"id":"b9PNBPiFnK2d"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#14.Write a program that uses the logging module to log both informational and error messages ?"],"metadata":{"id":"TQGXYRTQnQqL"}},{"cell_type":"code","source":["import logging\n","\n","# Configure logging\n","logging.basicConfig(filename='app.log', level=logging.DEBUG,\n","                    format='%(asctime)s - %(levelname)s - %(message)s')\n","\n","def perform_operations():\n","    logging.info(\"Starting the program\")\n","\n","    # Division operation\n","    try:\n","        a, b = 10, 2\n","        result = a / b\n","        logging.info(f\"Successful division: {a} / {b} = {result}\")\n","        print(f\"Division result: {result}\")\n","    except ZeroDivisionError:\n","        logging.error(\"Attempted to divide by zero\", exc_info=True)\n","        print(\"Error: Cannot divide by zero.\")\n","\n","    # File reading operation\n","    try:\n","        filename = \"example.txt\"\n","        with open(filename, 'r') as file:\n","            content = file.read()\n","            logging.info(f\"Successfully read file: {filename}\")\n","            print(content)\n","    except FileNotFoundError:\n","        logging.error(f\"File not found: {filename}\", exc_info=True)\n","        print(\"Error: File not found.\")\n","\n","    # Dictionary key access\n","    try:\n","        data = {\"name\": \"Alice\", \"age\": 25}\n","        key = \"address\"\n","        value = data[key]\n","        logging.info(f\"Successfully accessed dictionary key: {key} -> {value}\")\n","    except KeyError:\n","        logging.error(f\"Key not found in dictionary: {key}\", exc_info=True)\n","        print(\"Error: Key not found in dictionary.\")\n","\n","    logging.info(\"Program execution completed\")\n","\n","# Run the program\n","perform_operations()\n"],"metadata":{"id":"tnwLa-_unxSL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#15.Write a Python program that prints the content of a file and handles the case when the file is empty?"],"metadata":{"id":"uJ0WANcsn8Oa"}},{"cell_type":"code","source":["import os\n","\n","def print_file_content(filename):\n","    try:\n","        if os.path.exists(filename):\n","            with open(filename, 'r') as file:\n","                content = file.read()\n","                if content.strip():  # Check if file is empty after stripping whitespace\n","                    print(\"File Content:\\n\", content)\n","                else:\n","                    print(\"Error: The file is empty.\")\n","        else:\n","            print(\"Error: File does not exist.\")\n","    except Exception as e:\n","        print(f\"An error occurred: {e}\")\n","\n","# Example usage\n","print_file_content(\"example.txt\")  # Change to an existing or empty file for testing\n"],"metadata":{"id":"19e8fNw6oFXv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#16.Demonstrate how to use memory profiling to check the memory usage of a small program ?"],"metadata":{"id":"BQu0i7sCoNJP"}},{"cell_type":"code","source":["from memory_profiler import profile\n","\n","@profile\n","def memory_usage_example():\n","    # Creating a large list\n","    numbers = [i for i in range(100000)]\n","\n","    # Performing a simple calculation\n","    total = sum(numbers)\n","\n","    # Creating a dictionary\n","    squares = {i: i**2 for i in range(1000)}\n","\n","    print(\"Memory profiling example completed.\")\n","\n","# Run the function\n","if __name__ == \"__main__\":\n","    memory_usage_example()\n"],"metadata":{"id":"ijbAwDntoWZk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#17.Write a Python program to create and write a list of numbers to a file, one number per line ?"],"metadata":{"id":"aTi1czc_oeNd"}},{"cell_type":"code","source":["def write_numbers_to_file(filename, numbers):\n","    try:\n","        with open(filename, 'w') as file:\n","            for number in numbers:\n","                file.write(f\"{number}\\n\")\n","        print(f\"Numbers successfully written to {filename}\")\n","    except Exception as e:\n","        print(f\"An error occurred: {e}\")\n","\n","# Example usage\n","numbers_list = list(range(1, 101))  # List of numbers from 1 to 100\n","write_numbers_to_file(\"numbers.txt\", numbers_list)\n"],"metadata":{"id":"Up-IYd50ouW3"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#18.How would you implement a basic logging setup that logs to a file with rotation after ?"],"metadata":{"id":"r5SHAs6io1GP"}},{"cell_type":"code","source":["import logging\n","from logging.handlers import RotatingFileHandler\n","\n","# Configure rotating log handler\n","log_handler = RotatingFileHandler('error.log', maxBytes=5000, backupCount=3)\n","log_handler.setLevel(logging.ERROR)\n","formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n","log_handler.setFormatter(formatter)\n","\n","# Configure logging\n","logger = logging.getLogger()\n","logger.setLevel(logging.ERROR)\n","logger.addHandler(log_handler)\n","\n","def divide(a, b):\n","    try:\n","        result = a / b\n","        print(f\"Result: {result}\")\n","    except ZeroDivisionError as e:\n","        logger.error(\"Attempted to divide by zero\", exc_info=True)\n","        print(\"Error: Cannot divide by zero.\")\n","\n","def open_file(filename):\n","    try:\n","        with open(filename, 'r') as file:\n","            content = file.read()\n","            print(content)\n","    except FileNotFoundError as e:\n","        logger.error(\"File not found error\", exc_info=True)\n","        print(\"Error: File not found.\")\n","\n","def access_dict_key(data, key):\n","    try:\n","        value = data[key]\n","        print(f\"Value: {value}\")\n","    except KeyError as e:\n","        logger.error(\"Dictionary key not found\", exc_info=True)\n","        print(\"Error: Key not found in dictionary.\")\n","\n","# Example usage\n","divide(10, 2)\n","divide(5, 0)\n","open_file(\"non_existent_file.txt\")\n","access_dict_key({\"name\": \"Alice\", \"age\": 25}, \"address\")\n"],"metadata":{"id":"twDg6WCjpMem"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#19.Write a program that handles both IndexError and KeyError using a try-except block ?"],"metadata":{"id":"PccPV9FUp3aF"}},{"cell_type":"code","source":["import logging\n","\n","# Configure logging\n","logging.basicConfig(filename='error.log', level=logging.ERROR,\n","                    format='%(asctime)s - %(levelname)s - %(message)s')\n","\n","def access_list_and_dict(data_list, data_dict, list_index, dict_key):\n","    try:\n","        # Access list element\n","        list_value = data_list[list_index]\n","        print(f\"List Value: {list_value}\")\n","\n","        # Access dictionary value\n","        dict_value = data_dict[dict_key]\n","        print(f\"Dictionary Value: {dict_value}\")\n","\n","    except IndexError as e:\n","        logging.error(\"List index out of range\", exc_info=True)\n","        print(\"Error: Index out of range.\")\n","\n","    except KeyError as e:\n","        logging.error(\"Dictionary key not found\", exc_info=True)\n","        print(\"Error: Key not found in dictionary.\")\n","\n","# Example usage\n","sample_list = [10, 20, 30]\n","sample_dict = {\"name\": \"Alice\", \"age\": 25}\n","\n","access_list_and_dict(sample_list, sample_dict, 1, \"name\")  # Valid case\n","access_list_and_dict(sample_list, sample_dict, 5, \"name\")  # Causes IndexError\n","access_list_and_dict(sample_list, sample_dict, 2, \"address\")  # Causes KeyError\n"],"metadata":{"id":"UxHAb6ylqC-t"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#20.Write a Python program that reads a file and prints the number of occurrences of a specific word ?"],"metadata":{"id":"DK3fYlGvqRRX"}},{"cell_type":"code","source":["def count_word_occurrences(filename, word):\n","    try:\n","        with open(filename, 'r', encoding='utf-8') as file:\n","            content = file.read().lower()  # Read file content and convert to lowercase\n","            words = content.split()  # Split content into words\n","            count = words.count(word.lower())  # Count occurrences of the word\n","            print(f\"The word '{word}' appears {count} times in '{filename}'.\")\n","    except FileNotFoundError:\n","        print(f\"Error: The file '{filename}' was not found.\")\n","    except Exception as e:\n","        print(f\"An error occurred: {e}\")\n","\n","# Example usage\n","filename = \"sample.txt\"  # Replace with your file name\n","word_to_count = \"python\"  # Replace with the word you want to count\n","count_word_occurrences(filename, word_to_count)\n"],"metadata":{"id":"WDb_sYyoqocv"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#21.How can you check if a file is empty before attempting to read its contents ?"],"metadata":{"id":"IUrsOA-Nqv-I"}},{"cell_type":"code","source":["import os\n","import logging\n","\n","# Configure logging\n","logging.basicConfig(filename='error.log', level=logging.ERROR,\n","                    format='%(asctime)s - %(levelname)s - %(message)s')\n","\n","def divide(a, b):\n","    try:\n","        result = a / b\n","        print(f\"Result: {result}\")\n","    except ZeroDivisionError as e:\n","        logging.error(\"Attempted to divide by zero\", exc_info=True)\n","        print(\"Error: Cannot divide by zero.\")\n","\n","def open_file(filename):\n","    try:\n","        if not os.path.exists(filename):\n","            raise FileNotFoundError(f\"File '{filename}' not found.\")\n","\n","        if os.stat(filename).st_size == 0:\n","            print(f\"Error: The file '{filename}' is empty.\")\n","            return\n","\n","        with open(filename, 'r') as file:\n","            content = file.read()\n","            print(content)\n","\n","    except FileNotFoundError as e:\n","        logging.error(\"File not found error\", exc_info=True)\n","        print(\"Error: File not found.\")\n","    except Exception as e:\n","        logging.error(\"An unexpected error occurred\", exc_info=True)\n","        print(f\"Error: {e}\")\n","\n","def access_dict_key(data, key):\n","    try:\n","        value = data[key]\n","        print(f\"Value: {value}\")\n","    except KeyError as e:\n","        logging.error(\"Dictionary key not found\", exc_info=True)\n","        print(\"Error: Key not found in dictionary.\")\n","\n","# Example usage\n","divide(10, 2)  # Normal division\n","divide(5, 0)   # This will cause an error and log it\n","open_file(\"non_existent_file.txt\")  # This will cause a file error and log it\n","access_dict_key({\"name\": \"Alice\", \"age\": 25}, \"address\")  # This will cause a dictionary key error and log it\n"],"metadata":{"id":"o0m3VnylrBox"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#22.How can you check if a file is empty before attempting to read its contents ?"],"metadata":{"id":"TgXFVtwOrQlP"}},{"cell_type":"code","source":["import os\n","import logging\n","\n","# Configure logging\n","logging.basicConfig(filename='error.log', level=logging.ERROR,\n","                    format='%(asctime)s - %(levelname)s - %(message)s')\n","\n","def divide(a, b):\n","    try:\n","        result = a / b\n","        print(f\"Result: {result}\")\n","    except ZeroDivisionError as e:\n","        logging.error(\"Attempted to divide by zero\", exc_info=True)\n","        print(\"Error: Cannot divide by zero.\")\n","\n","def open_file(filename):\n","    try:\n","        if not os.path.exists(filename):\n","            logging.error(f\"File not found: {filename}\")\n","            print(\"Error: File not found.\")\n","            return\n","\n","        if os.stat(filename).st_size == 0:\n","            print(f\"Error: The file '{filename}' is empty.\")\n","            return\n","\n","        with open(filename, 'r') as file:\n","            content = file.read()\n","            print(content)\n","    except Exception as e:\n","        logging.error(f\"An error occurred while opening the file: {e}\", exc_info=True)\n","        print(f\"Error: {e}\")\n","\n","def access_dict_key(data, key):\n","    try:\n","        value = data[key]\n","        print(f\"Value: {value}\")\n","    except KeyError as e:\n","        logging.error(\"Dictionary key not found\", exc_info=True)\n","        print(\"Error: Key not found in dictionary.\")\n","\n","# Example usage\n","divide(10, 2)  # Normal division\n","divide(5, 0)   # This will cause an error and log it\n","open_file(\"non_existent_file.txt\")  # This will cause a file error and log it\n","open_file(\"empty_file.txt\")  # This will check if the file is empty\n","access_dict_key({\"name\": \"Alice\", \"age\": 25}, \"address\")  # This will cause a dictionary key error and log it\n"],"metadata":{"id":"2S3dgs-VrZfO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#23.Write a Python program that writes to a log file when an error occurs during file handling ?"],"metadata":{"id":"RcOcMcV1rqpK"}},{"cell_type":"code","source":["import logging\n","\n","# Configure logging\n","logging.basicConfig(filename=\"error.log\", level=logging.ERROR, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n","\n","try:\n","    with open(\"non_existent_file.txt\", \"r\") as file:\n","        content = file.read()\n","        print(content)\n","except FileNotFoundError as e:\n","    logging.error(f\"File not found: {e}\")\n","    print(\"Error: The file does not exist. Check error.log for details.\")\n","except Exception as e:\n","    logging.error(f\"An unexpected error occurred: {e}\")\n","    print(\"An unexpected error occurred. Check error.log for details.\")\n"],"metadata":{"id":"q1RlFFD8r2iw"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1739468149025}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}